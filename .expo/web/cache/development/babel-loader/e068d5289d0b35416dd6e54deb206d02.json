{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"E:\\\\WORK\\\\React Native\\\\MusicApp\\\\App.js\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport { Player } from 'react-native-audio-toolkit';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport default function App() {\n  var audio = new Player(\"./assets/beep.mp4\").prepare();\n  console.log('audio', audio);\n  var bpm = 70;\n  var bpmInterval = 60000 / bpm;\n  var startTime;\n  var mainTimer;\n\n  var myTimerSetInterval = function myTimerSetInterval() {\n    var beep = function beep() {\n      return _regeneratorRuntime.async(function beep$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              startTime = Date.now();\n              console.log('initiStarttime', startTime);\n              startTime += bpmInterval;\n              console.log(\"beepStart time\", startTime);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    mainTimer = setInterval(beep, bpmInterval);\n  };\n\n  function hit() {\n    var hitTime = Date.now();\n    var fault = bpmInterval / 16;\n    console.log(\"hitTime\", hitTime);\n    var firstBorder = startTime + bpmInterval - fault;\n    var endInterval = startTime + bpmInterval;\n\n    if (hitTime > startTime) {\n      console.log('BOLSGE');\n    }\n\n    if (hitTime < startTime) {\n      console.log('MENSHE');\n    }\n\n    if (hitTime > startTime && hitTime < firstBorder) {\n      console.log(\"SLOW NOOB\");\n    }\n\n    if (hitTime >= firstBorder && hitTime <= endInterval) {\n      console.log(\"GOD\");\n    }\n  }\n\n  var stopBeat = function stopBeat() {\n    clearInterval(mainTimer);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(Button, {\n    onPress: myTimerSetInterval,\n    title: \"Mentronom\",\n    color: \"#132454\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: hit,\n    title: \"Beat\",\n    color: \"#841584\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: stopBeat,\n    title: \"Stop beating \",\n    color: \"#441684\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["E:/WORK/React Native/MusicApp/App.js"],"names":["StatusBar","React","useState","Player","App","audio","prepare","console","log","bpm","bpmInterval","startTime","mainTimer","myTimerSetInterval","beep","Date","now","setInterval","hit","hitTime","fault","firstBorder","endInterval","stopBeat","clearInterval","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport { Player } from 'react-native-audio-toolkit';\nimport { StyleSheet, Text, View, Button, Alert, Image } from \"react-native\";\n\nexport default function App() {\nconst audio=   new Player(\"./assets/beep.mp4\").prepare()\nconsole.log('audio', audio)\n// const audio=new Audio( require('./assets/beep.wav'))\n  const bpm = 70; // убрать когда будет UI\n  const bpmInterval = 60000 / bpm;\n  let startTime;\n  let mainTimer;\n  const myTimerSetInterval = () => {\n    const beep = async () => {\n      // new Player(\"./assets/beep.mp4\").play();\n      //  audio.play();\n      startTime = Date.now();\n      console.log('initiStarttime', startTime)\n      startTime += bpmInterval;\n      console.log(\"beepStart time\", startTime);\n    };\n    mainTimer = setInterval(beep, bpmInterval);\n  };\n\n  function hit() {\n    const hitTime = Date.now();\n    const fault = bpmInterval / 16;\n    console.log(\"hitTime\", hitTime);\n    const firstBorder = startTime + bpmInterval - fault;\n    const endInterval = startTime + bpmInterval;\n    if(hitTime>startTime ){\n      console.log('BOLSGE',)\n    }\n    if(hitTime<startTime){\n      console.log('MENSHE', )\n    }\n    if (hitTime > startTime && hitTime < firstBorder) {\n      console.log(\"SLOW NOOB\");\n    }\n    if (hitTime >= firstBorder && hitTime <= endInterval) {\n      console.log(\"GOD\");\n    }\n  }\n\n  const stopBeat = () => {\n    clearInterval(mainTimer);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <Button\n        onPress={myTimerSetInterval}\n        title=\"Mentronom\"\n        color=\"#132454\"\n        accessibilityLabel=\"Learn more about this purple button\"\n      />\n      <Button\n        onPress={hit}\n        title=\"Beat\"\n        color=\"#841584\"\n        accessibilityLabel=\"Learn more about this purple button\"\n      />\n      <Button\n        onPress={stopBeat}\n        title=\"Stop beating \"\n        color=\"#441684\"\n        accessibilityLabel=\"Learn more about this purple button\"\n      />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}