{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport _ from 'lodash';\nimport async from 'async';\nimport EventEmitter from 'eventemitter3';\nimport MediaStates from \"./MediaStates\";\nvar RCTAudioPlayer = NativeModules.AudioPlayer;\nvar playerId = 0;\nvar defaultPlayerOptions = {\n  autoDestroy: true,\n  continuesToPlayInBackground: false\n};\n\nvar Player = function (_EventEmitter) {\n  _inherits(Player, _EventEmitter);\n\n  var _super = _createSuper(Player);\n\n  function Player(path) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPlayerOptions;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this);\n    _this._path = path;\n    _this._options = options;\n    _this._playerId = playerId++;\n\n    _this._reset();\n\n    var appEventEmitter = Platform.OS === 'ios' ? NativeAppEventEmitter : DeviceEventEmitter;\n    appEventEmitter.addListener('RCTAudioPlayerEvent:' + _this._playerId, function (payload) {\n      _this._handleEvent(payload.event, payload.data);\n    });\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this._state = MediaStates.IDLE;\n      this._volume = 1.0;\n      this._pan = 0.0;\n      this._wakeLock = false;\n      this._duration = -1;\n      this._position = -1;\n      this._lastSync = -1;\n      this._looping = false;\n    }\n  }, {\n    key: \"_storeInfo\",\n    value: function _storeInfo(info) {\n      if (!info) {\n        return;\n      }\n\n      this._duration = info.duration;\n      this._position = info.position;\n      this._lastSync = Date.now();\n    }\n  }, {\n    key: \"_updateState\",\n    value: function _updateState(err, state, results) {\n      this._state = err ? MediaStates.ERROR : state;\n\n      if (err || !results) {\n        return;\n      }\n\n      var info = _.last(_.filter(results, _.identity));\n\n      this._storeInfo(info);\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(event, data) {\n      switch (event) {\n        case 'progress':\n          break;\n\n        case 'ended':\n          this._updateState(null, MediaStates.PREPARED);\n\n          this._position = -1;\n          break;\n\n        case 'info':\n          break;\n\n        case 'error':\n          this._state = MediaStates.ERROR;\n          break;\n\n        case 'pause':\n          this._state = MediaStates.PAUSED;\n\n          this._storeInfo(data.info);\n\n          break;\n\n        case 'forcePause':\n          this.pause();\n          break;\n\n        case 'looped':\n          this._position = 0;\n          this._lastSync = Date.now();\n          break;\n      }\n\n      this.emit(event, data);\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      var _this2 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n\n      this._updateState(null, MediaStates.PREPARING);\n\n      var tasks = [];\n      tasks.push(function (next) {\n        RCTAudioPlayer.prepare(_this2._playerId, _this2._path, _this2._options, next);\n      });\n      tasks.push(function (next) {\n        RCTAudioPlayer.set(_this2._playerId, {\n          volume: _this2._volume,\n          pan: _this2._pan,\n          wakeLock: _this2._wakeLock,\n          looping: _this2._looping\n        }, next);\n      });\n      async.series(tasks, function (err, results) {\n        _this2._updateState(err, MediaStates.PREPARED, results);\n\n        callback(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this3 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n      var tasks = [];\n\n      if (this._state === MediaStates.IDLE) {\n        tasks.push(function (next) {\n          _this3.prepare(next);\n        });\n      }\n\n      tasks.push(function (next) {\n        RCTAudioPlayer.play(_this3._playerId, next);\n      });\n      async.series(tasks, function (err, results) {\n        _this3._updateState(err, MediaStates.PLAYING, results);\n\n        callback(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n      RCTAudioPlayer.pause(this._playerId, function (err, results) {\n        callback(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"playPause\",\n    value: function playPause() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n\n      if (this._state === MediaStates.PLAYING) {\n        this.pause(function (err) {\n          callback(err, true);\n        });\n      } else {\n        this.play(function (err) {\n          callback(err, false);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this4 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n      RCTAudioPlayer.stop(this._playerId, function (err, results) {\n        _this4._updateState(err, MediaStates.PREPARED);\n\n        _this4._position = -1;\n        callback(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.noop;\n\n      this._reset();\n\n      RCTAudioPlayer.destroy(this._playerId, callback);\n    }\n  }, {\n    key: \"seek\",\n    value: function seek() {\n      var _this5 = this;\n\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n\n      if (this._state != MediaStates.SEEKING) {\n        this._preSeekState = this._state;\n      }\n\n      this._updateState(null, MediaStates.SEEKING);\n\n      RCTAudioPlayer.seek(this._playerId, position, function (err, results) {\n        if (err && err.err === 'seekfail') {\n          return;\n        }\n\n        _this5._updateState(err, _this5._preSeekState, [results]);\n\n        callback(err);\n      });\n    }\n  }, {\n    key: \"_setIfInitialized\",\n    value: function _setIfInitialized(options) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.noop;\n\n      if (this._state >= MediaStates.PREPARED) {\n        RCTAudioPlayer.set(this._playerId, options, callback);\n      }\n    }\n  }, {\n    key: \"volume\",\n    set: function set(value) {\n      this._volume = value;\n\n      this._setIfInitialized({\n        'volume': value\n      });\n    },\n    get: function get() {\n      return this._volume;\n    }\n  }, {\n    key: \"currentTime\",\n    set: function set(value) {\n      this.seek(value);\n    },\n    get: function get() {\n      var pos = -1;\n\n      if (this._position < 0) {\n        return -1;\n      }\n\n      if (this._state === MediaStates.PLAYING) {\n        pos = this._position + (Date.now() - this._lastSync);\n        pos = Math.min(pos, this._duration);\n        return pos;\n      } else {\n        return this._position;\n      }\n    }\n  }, {\n    key: \"wakeLock\",\n    set: function set(value) {\n      this._wakeLock = value;\n\n      this._setIfInitialized({\n        'wakeLock': value\n      });\n    }\n  }, {\n    key: \"looping\",\n    set: function set(value) {\n      this._looping = value;\n\n      this._setIfInitialized({\n        'looping': value\n      });\n    },\n    get: function get() {\n      return this._looping;\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return this._duration;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"canPlay\",\n    get: function get() {\n      return this._state >= MediaStates.PREPARED;\n    }\n  }, {\n    key: \"canStop\",\n    get: function get() {\n      return this._state >= MediaStates.PLAYING;\n    }\n  }, {\n    key: \"canPrepare\",\n    get: function get() {\n      return this._state == MediaStates.IDLE;\n    }\n  }, {\n    key: \"isPlaying\",\n    get: function get() {\n      return this._state == MediaStates.PLAYING;\n    }\n  }, {\n    key: \"isStopped\",\n    get: function get() {\n      return this._state <= MediaStates.PREPARED;\n    }\n  }, {\n    key: \"isPaused\",\n    get: function get() {\n      return this._state == MediaStates.PAUSED;\n    }\n  }, {\n    key: \"isPrepared\",\n    get: function get() {\n      return this._state == MediaStates.PREPARED;\n    }\n  }]);\n\n  return Player;\n}(EventEmitter);\n\nexport default Player;","map":{"version":3,"sources":["E:/WORK/React Native/MusicApp/node_modules/react-native-audio-toolkit/src/Player.js"],"names":["NativeAppEventEmitter","_","async","EventEmitter","MediaStates","RCTAudioPlayer","NativeModules","AudioPlayer","playerId","defaultPlayerOptions","autoDestroy","continuesToPlayInBackground","Player","path","options","_path","_options","_playerId","_reset","appEventEmitter","Platform","OS","DeviceEventEmitter","addListener","payload","_handleEvent","event","data","_state","IDLE","_volume","_pan","_wakeLock","_duration","_position","_lastSync","_looping","info","duration","position","Date","now","err","state","results","ERROR","last","filter","identity","_storeInfo","_updateState","PREPARED","PAUSED","pause","emit","callback","noop","PREPARING","tasks","push","next","prepare","set","volume","pan","wakeLock","looping","series","play","PLAYING","stop","destroy","SEEKING","_preSeekState","seek","value","_setIfInitialized","pos","Math","min"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  NativeAppEventEmitter,\n  Platform\n} from 'react-native';\n\nimport _ from 'lodash';\nimport async from 'async';\nimport EventEmitter from 'eventemitter3';\nimport MediaStates from './MediaStates';\n\nvar RCTAudioPlayer = NativeModules.AudioPlayer;\n\nvar playerId = 0;\n\nvar defaultPlayerOptions = {\n  autoDestroy: true,\n  continuesToPlayInBackground: false\n};\n\n/**\n * Represents a media player\n * @constructor\n */\nclass Player extends EventEmitter {\n  constructor(path, options = defaultPlayerOptions) {\n    super();\n\n    this._path = path;\n    this._options = options;\n\n    this._playerId = playerId++;\n    this._reset();\n\n    let appEventEmitter = Platform.OS === 'ios' ? NativeAppEventEmitter : DeviceEventEmitter;\n\n    appEventEmitter.addListener('RCTAudioPlayerEvent:' + this._playerId, (payload: Event) => {\n      this._handleEvent(payload.event, payload.data);\n    });\n  }\n\n  _reset() {\n    this._state = MediaStates.IDLE;\n    this._volume = 1.0;\n    this._pan = 0.0;\n    this._wakeLock = false;\n    this._duration = -1;\n    this._position = -1;\n    this._lastSync = -1;\n    this._looping = false;\n  }\n\n  _storeInfo(info) {\n    if (!info) {\n      return;\n    }\n\n    this._duration = info.duration;\n    this._position = info.position;\n    this._lastSync = Date.now();\n  }\n\n  _updateState(err, state, results) {\n    this._state = err ? MediaStates.ERROR : state;\n\n    if (err || !results) {\n      return;\n    }\n\n    // Use last truthy value from results array as new media info\n    let info = _.last(_.filter(results, _.identity));\n    this._storeInfo(info);\n  }\n\n  _handleEvent(event, data) {\n    //console.log('event: ' + event + ', data: ' + JSON.stringify(data));\n    switch (event) {\n      case 'progress':\n        // TODO\n        break;\n      case 'ended':\n        this._updateState(null, MediaStates.PREPARED);\n        this._position = -1;\n        break;\n      case 'info':\n        // TODO\n        break;\n      case 'error':\n        this._state = MediaStates.ERROR;\n        //this.emit('error', data);\n        break;\n      case 'pause':\n        this._state = MediaStates.PAUSED;\n        this._storeInfo(data.info);\n        break;\n      case 'forcePause':\n        this.pause();\n        break;\n      case 'looped':\n        this._position = 0;\n        this._lastSync = Date.now();\n        break;\n    }\n\n    this.emit(event, data);\n  }\n\n  prepare(callback = _.noop) {\n    this._updateState(null, MediaStates.PREPARING);\n\n    let tasks = [];\n\n    // Prepare player\n    tasks.push((next) => {\n      RCTAudioPlayer.prepare(this._playerId, this._path, this._options, next);\n    });\n\n    // Set initial values for player options\n    tasks.push((next) => {\n      RCTAudioPlayer.set(this._playerId, {\n        volume: this._volume,\n        pan: this._pan,\n        wakeLock: this._wakeLock,\n        looping: this._looping\n      }, next);\n    });\n\n    async.series(tasks, (err, results) => {\n      this._updateState(err, MediaStates.PREPARED, results);\n      callback(err);\n    });\n\n    return this;\n  }\n\n  play(callback = _.noop) {\n    let tasks = [];\n\n    // Make sure player is prepared\n    if(this._state === MediaStates.IDLE) {\n      tasks.push((next) => {\n        this.prepare(next);\n      });\n    }\n\n    // Start playback\n    tasks.push((next) => {\n      RCTAudioPlayer.play(this._playerId, next);\n    });\n\n    async.series(tasks, (err, results) => {\n      this._updateState(err, MediaStates.PLAYING, results);\n      callback(err);\n    });\n\n    return this;\n  }\n\n  pause(callback = _.noop) {\n    RCTAudioPlayer.pause(this._playerId, (err, results) => {\n      //this._updateState(err, MediaStates.PAUSED, [results]); // We are sending a pause event on the native side\n      callback(err);\n    });\n\n    return this;\n  }\n\n  playPause(callback = _.noop) {\n    if (this._state === MediaStates.PLAYING) {\n      this.pause((err) => {\n        callback(err, true);\n      });\n    } else {\n      this.play((err) => {\n        callback(err, false);\n      });\n    }\n\n    return this;\n  }\n\n  stop(callback = _.noop) {\n    RCTAudioPlayer.stop(this._playerId, (err, results) => {\n      this._updateState(err, MediaStates.PREPARED);\n      this._position = -1;\n      callback(err);\n    });\n\n    return this;\n  }\n\n  destroy(callback = _.noop) {\n    this._reset();\n    RCTAudioPlayer.destroy(this._playerId, callback);\n  }\n\n  seek(position = 0, callback = _.noop) {\n    // Store old state, but not if it was already SEEKING\n    if (this._state != MediaStates.SEEKING) {\n      this._preSeekState = this._state;\n    }\n\n    this._updateState(null, MediaStates.SEEKING);\n    RCTAudioPlayer.seek(this._playerId, position, (err, results) => {\n      if (err && err.err === 'seekfail') {\n        // Seek operation was cancelled; ignore\n        return;\n      }\n\n      this._updateState(err, this._preSeekState, [results]);\n      callback(err);\n    });\n  }\n\n  _setIfInitialized(options, callback = _.noop) {\n    if (this._state >= MediaStates.PREPARED) {\n      RCTAudioPlayer.set(this._playerId, options, callback);\n    }\n  }\n\n  set volume(value) {\n    this._volume = value;\n    this._setIfInitialized({'volume': value});\n  }\n\n  set currentTime(value) {\n    this.seek(value);\n  }\n\n  set wakeLock(value) {\n    this._wakeLock = value;\n    this._setIfInitialized({'wakeLock': value});\n  }\n\n  set looping(value) {\n    this._looping = value;\n    this._setIfInitialized({'looping': value});\n  }\n\n  get currentTime() {\n    let pos = -1;\n\n    if (this._position < 0) {\n      return -1;\n    }\n\n    if (this._state === MediaStates.PLAYING) {\n      pos = this._position + (Date.now() - this._lastSync);\n      pos = Math.min(pos, this._duration);\n\n      return pos;\n    } else {\n      return this._position;\n    }\n  }\n\n  get volume() { return this._volume; }\n  get looping() { return this._looping; }\n  get duration() { return this._duration; }\n\n  get state()      { return this._state; }\n  get canPlay()    { return this._state >= MediaStates.PREPARED; }\n  get canStop()    { return this._state >= MediaStates.PLAYING;  }\n  get canPrepare() { return this._state == MediaStates.IDLE;     }\n  get isPlaying()  { return this._state == MediaStates.PLAYING;  }\n  get isStopped()  { return this._state <= MediaStates.PREPARED; }\n  get isPaused()   { return this._state == MediaStates.PAUSED;   }\n  get isPrepared() { return this._state == MediaStates.PREPARED; }\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}