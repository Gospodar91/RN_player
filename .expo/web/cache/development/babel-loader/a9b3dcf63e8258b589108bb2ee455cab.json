{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"E:\\\\WORK\\\\React Native\\\\MusicApp\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport default function App() {\n  var onPressLearnMore = function onPressLearnMore() {\n    console.log('hi');\n    Alert.alert('Right');\n  };\n\n  var audio = new Audio(\"./assets/beep2.mp3\");\n  console.log('audio', audio);\n  var userBPM;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      startTimeState = _useState2[0],\n      setStateInterval = _useState2[1];\n\n  var bpm = 70;\n  var bpmInterval = 60000 / bpm;\n\n  function saveTimer() {\n    var startTime = Date.now();\n    setStateInterval(startTime);\n\n    var beep = function beep() {\n      audio.play();\n      console.log(\"Beeeep\");\n      startTime += bpmInterval;\n      setStateInterval(startTime);\n    };\n\n    var myTimerSetInterval = function myTimerSetInterval() {\n      return setInterval(beep, bpmInterval);\n    };\n\n    return myTimerSetInterval();\n  }\n\n  function hit() {\n    var hitTime = Date.now();\n    var fault = bpmInterval / 16;\n    var firstBorder = startTimeState + bpmInterval - fault;\n    var endInterval = startTimeState + bpmInterval;\n\n    if (hitTime > startTimeState && hitTime < firstBorder) {\n      console.log(\"SLOW NOOB\");\n    }\n\n    if (hitTime >= firstBorder && hitTime <= endInterval) {\n      console.log(\"GOD\");\n    }\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(Button, {\n    onPress: onPressLearnMore,\n    title: \"Mentronom\",\n    color: \"#432454\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: hit,\n    title: \"Beat\",\n    color: \"#841584\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["E:/WORK/React Native/MusicApp/App.js"],"names":["StatusBar","React","useState","App","onPressLearnMore","console","log","Alert","alert","audio","Audio","userBPM","startTimeState","setStateInterval","bpm","bpmInterval","saveTimer","startTime","Date","now","beep","play","myTimerSetInterval","setInterval","hit","hitTime","fault","firstBorder","endInterval","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useState} from 'react';\nimport { StyleSheet, Text, View,Button, Alert,Image } from 'react-native';\n\nexport default function App() {\n\n\n  const onPressLearnMore=()=>{\n    console.log('hi',)\n    Alert.alert('Right')\n  }\n\n\n  let audio = new Audio(\"./assets/beep2.mp3\");\nconsole.log('audio', audio)\n  let userBPM; // Пользовательское значение метронома\n  const [startTimeState, setStateInterval] = useState(\"\");\n  const bpm = 70; // убрать когда будет UI\n  const bpmInterval = 60000/bpm;\n  function saveTimer() {\n    let startTime = Date.now();\n    setStateInterval(startTime); // выкинули наверх в глобальный стейт\n    const beep = () => {\n      audio.play();\n      console.log(\"Beeeep\");\n      startTime += bpmInterval;\n      setStateInterval(startTime);\n    };\n    const myTimerSetInterval = () => setInterval(beep, bpmInterval);\n\n    return myTimerSetInterval();\n  }\n  function hit() {\n    const hitTime = Date.now();\n    const fault = bpmInterval/16;\n    const firstBorder = startTimeState + bpmInterval - fault;\n    const endInterval = startTimeState + bpmInterval;\n\n    if (hitTime > startTimeState && hitTime < firstBorder) {\n      console.log(\"SLOW NOOB\");\n    }\n    if (hitTime >= firstBorder && hitTime <= endInterval) {\n      console.log(\"GOD\");\n    }\n  }\n\n\n\n  \n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <Button\n  onPress={onPressLearnMore}\n  title=\"Mentronom\"\n  color=\"#432454\"\n  accessibilityLabel=\"Learn more about this purple button\"\n/>\n      <Button\n  onPress={hit}\n  title=\"Beat\"\n  color=\"#841584\"\n  accessibilityLabel=\"Learn more about this purple button\"\n/>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}